# https://aka.ms/yaml

trigger:
 branches:
   include:
     - master
     - features/*
     - feature/*
     - releases/*
 paths:
   exclude:
     - README.md
     - azure-pipelines.yml

variables:
  patch: $[counter('versioncounter', 100)]
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  GitHubApplicationName: 'Amusoft.VisualStudio.TemplateGenerator'
  GitHubRepoName: 'Amusoft.VisualStudio.TemplateGenerator'
  GitHubAssetsPattern : '$(Build.ArtifactStagingDirectory)\*.zip'
  GitHubAccessToken : '$($gitAccessToken)'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

pool:
  vmImage: 'windows-2019'

jobs:
- job:
  displayName: Build
  condition: succeeded()
  steps:

  - task: PowerShell@2
    displayName: Get Projectversion from file
    inputs:
      filePath: 'build\csproj-version-to-pipeline.ps1'
      arguments: '$(patch) $(Build.SourcesDirectory)\src\Generator.Client.Desktop\Generator.Client.Desktop.csproj PackageVersion'

  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '4.x'

  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: '**/*.sln'
      feedsToUse: 'select'

  - task: VSBuild@1
    inputs:
      solution: '**\*.sln'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\*test*.dll
        !**\*TestAdapter.dll
        !**\obj\**
      searchFolder: '$(System.DefaultWorkingDirectory)'

  - task: PowerShell@2
    displayName: dotnet publish
    inputs:
      targetType: 'inline'
      script: |
        # dotnet restore $(Build.SourcesDirectory)\src\Generator.sln
        # dotnet build $(Build.SourcesDirectory)\src\Generator.Client.Desktop\Generator.Client.Desktop.csproj -r win-x64 -c $(buildConfiguration) -v n
        & dotnet publish $(Build.SourcesDirectory)\src\Generator.Client.Desktop\Generator.Client.Desktop.csproj -r win-x64 -c $(buildConfiguration) -v n --self-contained --no-build -o $(Build.ArtifactStagingDirectory) /p:PublishSingleFile=true /p:PublishTrimmed=true

  - task: CopyFiles@2
    enabled: true
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.md
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PowerShell@2
    displayName: zip artifacts
    inputs:
      targetType: 'inline'
      script: |
        7z a $(Build.ArtifactStagingDirectory)\TemplateGenerator_$(PackageVersion).zip $(Build.ArtifactStagingDirectory)\*

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: |
        *.exe
        *.pdb

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'drop'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: PublishGitHubRelease@0
    enabled: false
    displayName: 'Publish-GitHub-Alpha'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  
    inputs:
      applicationName: '$(GitHubApplicationName)'
      gitSourceOption: 'github'
      token: '$(GitHubAccessToken)'
      repo: '$(GitHubRepoName)'
      owner: 'taori'
      tagName: 'alpha-$(PackageVersion)'
      releaseName: 'alpha-$(PackageVersion)'
      releaseBody: 'automated release from Azure DevOps'
      draft: false
      prerelease: true
      assetsPattern: '$(GitHubAssetsPattern)'

  - task: PublishGitHubRelease@0
    enabled: false
    displayName: 'Publish-GitHub-Release'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/')) 
    inputs:
      applicationName: '$(GitHubApplicationName)'
      gitSourceOption: 'github'
      token: '$(GitHubAccessToken)'
      repo: '$(GitHubRepoName)'
      owner: 'taori'
      tagName: 'release-$(PackageVersion)'
      releaseName: 'release-$(PackageVersion)'
      releaseBody: 'automated release from Azure DevOps'
      draft: false
      prerelease: false
      assetsPattern: '$(GitHubAssetsPattern)'
